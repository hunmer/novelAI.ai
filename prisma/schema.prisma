generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  meta        String   @default("{}")
  world       String?  @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  characters    Character[]
  scenes        Scene[]
  dialogs       Dialog[]
  assets        Asset[]
  versions      Version[]
  knowledgeBase KnowledgeBase[]
}

model Character {
  id         String   @id @default(cuid())
  projectId  String
  name       String
  attributes String   @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Scene {
  id               String   @id @default(cuid())
  projectId        String
  name             String
  description      String?  // Markdown格式的场景详细描述
  paintingPrompt   String?  // 用于生成场景图片的绘画提示词
  backgroundImage  String?  // 场景背景图URL
  metadata         String   @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  project          Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Dialog {
  id         String   @id @default(cuid())
  projectId  String
  content    String
  metadata   String   @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Asset {
  id          String   @id @default(cuid())
  projectId   String
  type        String
  url         String
  metadata    String   @default("{}")
  version     Int      @default(1)
  createdAt   DateTime @default(now())

  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Version {
  id            String   @id @default(cuid())
  projectId     String
  snapshot      String
  source        String
  baseVersionId String?
  createdAt     DateTime @default(now())

  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdAt])
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  projectId String
  content   String
  embedding String   @default("[]")
  metadata  String   @default("{}")
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model ModelProvider {
  id          String   @id @default(cuid())
  name        String
  type        String   // 'openai', 'anthropic', 'custom'
  apiKey      String
  baseUrl     String?  // 自定义API端点
  models      String   // JSON数组存储可用模型
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  metadata    String   @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isDefault])
  @@index([isActive])
}

model GeneratedImage {
  id              String   @id @default(cuid())
  projectId       String?  // 关联的项目ID（可选）
  prompt          String   // 生成图片的提示词
  modelProvider   String   // 使用的模型提供商
  modelName       String   // 使用的具体模型
  imageUrl        String   // 生成的图片URL
  metadata        String   @default("{}")  // 额外信息（尺寸、风格等）
  createdAt       DateTime @default(now())

  @@index([projectId])
  @@index([createdAt])
}
